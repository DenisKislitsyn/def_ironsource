local dirtylarry = require "dirtylarry/dirtylarry"

local sys_name = sys.get_sys_info().system_name
local gameIDs = {
  ["Android"] = "1401815",
  ["iPhone OS"] = "1425385"
}

local BACK_KEY = hash("back")

local REWARDED = "rewardedVideo"
local VIDEO = "video"

local function print_placement_state(placement)
  if unityads then
    local state = placement and unityads.getPlacementState(placement) or unityads.getPlacementState()
    if state == unityads.PLACEMENT_STATE_READY then
      print("PLACEMENT_STATE_READY ", placement)
    elseif state == unityads.PLACEMENT_STATE_NOT_AVAILABLE then
      print("PLACEMENT_STATE_NOT_AVAILABLE ", placement)
    elseif state == unityads.PLACEMENT_STATE_DISABLED then
      print("PLACEMENT_STATE_DISABLED ", placement)
    elseif state == unityads.PLACEMENT_STATE_WAITING then
      print("PLACEMENT_STATE_WAITING ", placement)
    elseif state == unityads.PLACEMENT_STATE_NO_FILL then
      print("PLACEMENT_STATE_NO_FILL ", placement)
    end
  end
end

local function btn_ready(self, placementId)
  gui.set_color(gui.get_node(placementId.."/larrylabel"), vmath.vector4(1, 1, 1, 1))
end

local function unity_ads_callback(self, msg_type, message)
  if msg_type == unityads.TYPE_IS_READY then
    print(message.placementId, " is ready")
    btn_ready(self, message.placementId)
  elseif msg_type == unityads.TYPE_DID_START then
    print(message.placementId, " started")
  elseif msg_type == unityads.TYPE_DID_ERROR then
    print(message.message)
    -- errors info https://github.com/Unity-Technologies/unity-ads-ios/wiki/sdk_ios_api_errors
    if message.error == unityads.ERROR_NOT_INITIALIZED then
      print("kUnityAdsErrorNotInitialized")
    elseif message.error == unityads.ERROR_INITIALIZED_FAILED then
      print("kUnityAdsErrorInitializedFailed")
    elseif message.error == unityads.ERROR_INVALID_ARGUMENT then
      print("kUnityAdsErrorInvalidArgument")
    elseif message.error == unityads.ERROR_VIDEO_PLAYER then
      print("kUnityAdsErrorVideoPlayerError")
    elseif message.error == unityads.ERROR_INIT_SANITY_CHECK_FAIL then
      print("kUnityAdsErrorInitSanityCheckFail")
    elseif message.error == unityads.ERROR_AD_BLOCKER_DETECTED then
      print("kUnityAdsErrorAdBlockerDetected")
    elseif message.error == unityads.ERROR_FILE_IO then
      print("kUnityAdsErrorFileIoError")
    elseif message.error == unityads.ERROR_DEVICE_ID then
      print("kUnityAdsErrorDeviceIdError")
    elseif message.error == unityads.ERROR_SHOW then
      print("kUnityAdsErrorShowError")
    elseif message.error == unityads.ERROR_INTERNAL then
      print("kUnityAdsErrorInternalError")
    end
  elseif msg_type == unityads.TYPE_DID_FINISH then
    --all finish states info https://github.com/Unity-Technologies/unity-ads-ios/wiki/sdk_ios_api_finishstates
    if message.state == unityads.FINISH_STATE_ERROR then
      print("kUnityAdsFinishStateError")
    elseif message.state == unityads.FINISH_STATE_SKIPPED then
      print("kUnityAdsFinishStateSkipped")
    elseif message.state == unityads.FINISH_STATE_COMPLETED then
      print("kUnityAdsFinishStateCompleted")
    end
  end
end

function init(self)
  msg.post(".", "acquire_input_focus")
  if unityads then
    print("VERSION IS: ", unityads.getVersion())
    print("DEBUG MODE IS:", unityads.getDebugMode())
    print("isInitialized:", unityads.isInitialized())
    print("isSupported:", unityads.isSupported())
    print("isReady(video):", unityads.isReady(VIDEO))
    print("isReady(rewardedVideo):", unityads.isReady(REWARDED))
    print("isReady():", unityads.isReady())
    print_placement_state(VIDEO)
    print_placement_state(REWARDED)
    print_placement_state()
    unityads.setDebugMode(true)
    unityads.setCallback(unity_ads_callback)
  end
end

function final(self)
  print("Final! Remove Callback!")
  if unityads then
    unityads.setCallback()
  end
end

local function init_unity_ads(self, appId)
  if unityads and appId then
    if not unityads.isInitialized() then
      print("Init SDK with id", appId)
      unityads.initialize(appId, unity_ads_callback, true)
    else
      print("UnityADS already inited. Just set callback one more time")
      unityads.setCallback(unity_ads_callback)
      if unityads.isReady(REWARDED) then
        btn_ready(self, REWARDED)
      end
      if unityads.isReady(VIDEO) then
        btn_ready(self, VIDEO)
      end
    end
  end
end

local function show_ad(self, placementId)
  if unityads then
    if placementId then
      unityads.show(placementId)
    else
      unityads.show()
    end
  end
end

local function set_callback(self)
  if unityads then
    print("Set Callback!")
    unityads.setCallback(unity_ads_callback)
  end
end

local function remove_callback(self)
  if unityads then
    print("Remove Callback!")
    unityads.setCallback(nil) -- same as unityads.setCallback()
  end
end

function on_input(self, action_id, action)
  self.input_default = dirtylarry:input("input", action_id, action, gui.KEYBOARD_TYPE_DEFAULT, "AppId")
  dirtylarry:button("init", action_id, action, function ()
    if self.input_default == "Empty" then
    self.input_default = gameIDs[sys_name]
  end
  init_unity_ads(self, self.input_default)
end)

dirtylarry:button(REWARDED, action_id, action, function ()
  print_placement_state(REWARDED)
  show_ad(self, REWARDED)
end)

dirtylarry:button(VIDEO, action_id, action, function ()
  print_placement_state(VIDEO)
  show_ad(self, VIDEO)
end)

dirtylarry:button("default", action_id, action, function ()
  show_ad(self)
end)

dirtylarry:button("set_callback", action_id, action, function ()
  set_callback(self)
end)

dirtylarry:button("remove_callback", action_id, action, function ()
  remove_callback(self)
end)

if action_id == BACK_KEY and action.released then
  print("Time to exit!")
  msg.post("@system:", "exit", {code = 0})
end

end
